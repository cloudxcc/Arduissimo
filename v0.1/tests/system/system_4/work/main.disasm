
system_4_0.elf:     file format elf32-littleriscv


Disassembly of section .text:

00010074 <main>:
int main(void)
{
   // write pattern in c_data memory
   for (int i = 0; i < 8; i += 1)
   {
      c_data[i] = (char)i;
   10074:	83418793          	addi	a5,gp,-1996 # 11b94 <c_data>
   10078:	4685                	li	a3,1
   1007a:	00d780a3          	sb	a3,1(a5)
   1007e:	4689                	li	a3,2
   10080:	00d78123          	sb	a3,2(a5)
   10084:	468d                	li	a3,3
   10086:	00d781a3          	sb	a3,3(a5)
   1008a:	4691                	li	a3,4
   1008c:	00d78223          	sb	a3,4(a5)
   10090:	4695                	li	a3,5
   10092:	00d782a3          	sb	a3,5(a5)
   10096:	4699                	li	a3,6
   10098:	00d78323          	sb	a3,6(a5)
   1009c:	469d                	li	a3,7
   1009e:	82018a23          	sb	zero,-1996(gp) # 11b94 <c_data>
   100a2:	00d783a3          	sb	a3,7(a5)
   100a6:	83418713          	addi	a4,gp,-1996 # 11b94 <c_data>
   }
   // read pattern from c_data memory
   for (int i = 0; i < 8; i += 1)
   100aa:	4781                	li	a5,0
   {
      char tmp = c_data[i];
      GPIO_0_OUT_SET = 0x1 << tmp;
   100ac:	4505                	li	a0,1
   100ae:	800305b7          	lui	a1,0x80030
   for (int i = 0; i < 8; i += 1)
   100b2:	4621                	li	a2,8
      char tmp = c_data[i];
   100b4:	00f706b3          	add	a3,a4,a5
      GPIO_0_OUT_SET = 0x1 << tmp;
   100b8:	00068683          	lb	a3,0(a3)
   for (int i = 0; i < 8; i += 1)
   100bc:	0785                	addi	a5,a5,1
      GPIO_0_OUT_SET = 0x1 << tmp;
   100be:	00d516b3          	sll	a3,a0,a3
   100c2:	c9d4                	sw	a3,20(a1)
   for (int i = 0; i < 8; i += 1)
   100c4:	fec798e3          	bne	a5,a2,100b4 <main+0x40>
   }

   // write pattern in s_data memory
   for (int i = 0; i < 8; i += 1)
   {
      s_data[i] = i + (i << 8);
   100c8:	82418713          	addi	a4,gp,-2012 # 11b84 <s_data>
   100cc:	10100693          	li	a3,257
   100d0:	00d71123          	sh	a3,2(a4)
   100d4:	20200693          	li	a3,514
   100d8:	00d71223          	sh	a3,4(a4)
   100dc:	30300693          	li	a3,771
   100e0:	00d71323          	sh	a3,6(a4)
   100e4:	40400693          	li	a3,1028
   100e8:	00d71423          	sh	a3,8(a4)
   100ec:	50500693          	li	a3,1285
   100f0:	00d71523          	sh	a3,10(a4)
   100f4:	60600693          	li	a3,1542
   100f8:	00d71623          	sh	a3,12(a4)
   100fc:	70700693          	li	a3,1799
   10100:	82019223          	sh	zero,-2012(gp) # 11b84 <s_data>
   10104:	00d71723          	sh	a3,14(a4)
   10108:	82418793          	addi	a5,gp,-2012 # 11b84 <s_data>
   }
   // read pattern from s_data memory
   for (int i = 0; i < 8; i += 1)
   1010c:	4681                	li	a3,0
   {
      short tmp = s_data[i];
      GPIO_1_OUT_SET = 0x1 << (tmp & 0xff);
   1010e:	4585                	li	a1,1
   10110:	80030637          	lui	a2,0x80030
   for (int i = 0; i < 8; i += 1)
   10114:	4521                	li	a0,8
      short tmp = s_data[i];
   10116:	0007d703          	lhu	a4,0(a5)
   for (int i = 0; i < 8; i += 1)
   1011a:	0685                	addi	a3,a3,1
   1011c:	0789                	addi	a5,a5,2
      GPIO_1_OUT_SET = 0x1 << (tmp & 0xff);
   1011e:	00e59833          	sll	a6,a1,a4
      GPIO_2_OUT_SET = 0x1 << ((tmp >> 8) & 0xff);
   10122:	8321                	srli	a4,a4,0x8
      GPIO_1_OUT_SET = 0x1 << (tmp & 0xff);
   10124:	11062a23          	sw	a6,276(a2) # 80030114 <_end+0x8001d578>
      GPIO_2_OUT_SET = 0x1 << ((tmp >> 8) & 0xff);
   10128:	00e59733          	sll	a4,a1,a4
   1012c:	20e62a23          	sw	a4,532(a2)
   for (int i = 0; i < 8; i += 1)
   10130:	fea693e3          	bne	a3,a0,10116 <main+0xa2>
   }

   // write pattern in u_data memory
   for (int i = 0; i < 8; i += 1)
   {
      u_data[i] = i +
   10134:	6749                	lui	a4,0x12
   10136:	010106b7          	lui	a3,0x1010
   1013a:	b9c70793          	addi	a5,a4,-1124 # 11b9c <u_data>
   1013e:	10168693          	addi	a3,a3,257 # 1010101 <_end+0xffd565>
   10142:	c3d4                	sw	a3,4(a5)
   10144:	020206b7          	lui	a3,0x2020
   10148:	20268693          	addi	a3,a3,514 # 2020202 <_end+0x200d666>
   1014c:	c794                	sw	a3,8(a5)
   1014e:	030306b7          	lui	a3,0x3030
   10152:	30368693          	addi	a3,a3,771 # 3030303 <_end+0x301d767>
   10156:	c7d4                	sw	a3,12(a5)
   10158:	040406b7          	lui	a3,0x4040
   1015c:	40468693          	addi	a3,a3,1028 # 4040404 <_end+0x402d868>
   10160:	cb94                	sw	a3,16(a5)
   10162:	050506b7          	lui	a3,0x5050
   10166:	50568693          	addi	a3,a3,1285 # 5050505 <_end+0x503d969>
   1016a:	cbd4                	sw	a3,20(a5)
   1016c:	060606b7          	lui	a3,0x6060
   10170:	60668693          	addi	a3,a3,1542 # 6060606 <_end+0x604da6a>
   10174:	cf94                	sw	a3,24(a5)
   10176:	070706b7          	lui	a3,0x7070
   1017a:	70768693          	addi	a3,a3,1799 # 7070707 <_end+0x705db6b>
   1017e:	b8072e23          	sw	zero,-1124(a4)
   10182:	cfd4                	sw	a3,28(a5)
   10184:	b9c70713          	addi	a4,a4,-1124
                  (i <<  8) +
                  (i << 16) +
                  (i << 24);
   }
   // read pattern from s_data memory
   for (int i = 0; i < 8; i += 1)
   10188:	4581                	li	a1,0
   {
      unsigned tmp = u_data[i];
      GPIO_3_OUT_SET = 0x1 << (tmp & 0xff);
   1018a:	4605                	li	a2,1
   1018c:	800306b7          	lui	a3,0x80030
   for (int i = 0; i < 8; i += 1)
   10190:	4821                	li	a6,8
      unsigned tmp = u_data[i];
   10192:	431c                	lw	a5,0(a4)
   for (int i = 0; i < 8; i += 1)
   10194:	0585                	addi	a1,a1,1
   10196:	0711                	addi	a4,a4,4
      GPIO_3_OUT_SET = 0x1 << (tmp & 0xff);
   10198:	00f61533          	sll	a0,a2,a5
   1019c:	30a6aa23          	sw	a0,788(a3) # 80030314 <_end+0x8001d778>
      GPIO_4_OUT_SET = 0x1 << ((tmp >>  8) & 0xff);
   101a0:	0087d513          	srli	a0,a5,0x8
   101a4:	00a61533          	sll	a0,a2,a0
   101a8:	40a6aa23          	sw	a0,1044(a3)
      GPIO_5_OUT_SET = 0x1 << ((tmp >> 16) & 0xff);
   101ac:	0107d513          	srli	a0,a5,0x10
   101b0:	00a61533          	sll	a0,a2,a0
      GPIO_6_OUT_SET = 0x1 << ((tmp >> 24) & 0xff);
   101b4:	83e1                	srli	a5,a5,0x18
      GPIO_5_OUT_SET = 0x1 << ((tmp >> 16) & 0xff);
   101b6:	50a6aa23          	sw	a0,1300(a3)
      GPIO_6_OUT_SET = 0x1 << ((tmp >> 24) & 0xff);
   101ba:	00f617b3          	sll	a5,a2,a5
   101be:	60f6aa23          	sw	a5,1556(a3)
   for (int i = 0; i < 8; i += 1)
   101c2:	fd0598e3          	bne	a1,a6,10192 <main+0x11e>
   }

   TC_KILL = 0x0;
   101c6:	800007b7          	lui	a5,0x80000
   101ca:	0007a223          	sw	zero,4(a5) # 80000004 <_end+0x7ffed468>
   asm volatile ("addi x0, x0, 0");
   101ce:	00000013          	nop

}
   101d2:	4501                	li	a0,0
   101d4:	8082                	ret
	...

000101d8 <_start>:
   101d8:	00002197          	auipc	gp,0x2
   101dc:	18818193          	addi	gp,gp,392 # 12360 <__global_pointer$>
   101e0:	80818513          	addi	a0,gp,-2040 # 11b68 <_edata>
   101e4:	00003617          	auipc	a2,0x3
   101e8:	9b860613          	addi	a2,a2,-1608 # 12b9c <_end>
   101ec:	40a60633          	sub	a2,a2,a0
   101f0:	00000593          	li	a1,0
   101f4:	26c000ef          	jal	ra,10460 <memset>
   101f8:	00000517          	auipc	a0,0x0
   101fc:	15c50513          	addi	a0,a0,348 # 10354 <__libc_fini_array>
   10200:	108000ef          	jal	ra,10308 <atexit>
   10204:	1c4000ef          	jal	ra,103c8 <__libc_init_array>
   10208:	00012503          	lw	a0,0(sp)
   1020c:	00410593          	addi	a1,sp,4
   10210:	00000613          	li	a2,0
   10214:	e61ff0ef          	jal	ra,10074 <main>
   10218:	1040006f          	j	1031c <exit>

0001021c <_fini>:
   1021c:	00008067          	ret

00010220 <deregister_tm_clones>:
   10220:	00002517          	auipc	a0,0x2
   10224:	94050513          	addi	a0,a0,-1728 # 11b60 <_global_impure_ptr>
   10228:	00002797          	auipc	a5,0x2
   1022c:	93878793          	addi	a5,a5,-1736 # 11b60 <_global_impure_ptr>
   10230:	00a78a63          	beq	a5,a0,10244 <deregister_tm_clones+0x24>
   10234:	ffff0317          	auipc	t1,0xffff0
   10238:	dcc30313          	addi	t1,t1,-564 # 0 <main-0x10074>
   1023c:	00030463          	beqz	t1,10244 <deregister_tm_clones+0x24>
   10240:	00030067          	jr	t1
   10244:	00008067          	ret

00010248 <register_tm_clones>:
   10248:	00002517          	auipc	a0,0x2
   1024c:	91850513          	addi	a0,a0,-1768 # 11b60 <_global_impure_ptr>
   10250:	00002597          	auipc	a1,0x2
   10254:	91058593          	addi	a1,a1,-1776 # 11b60 <_global_impure_ptr>
   10258:	40a585b3          	sub	a1,a1,a0
   1025c:	4025d593          	srai	a1,a1,0x2
   10260:	00200793          	li	a5,2
   10264:	02f5c5b3          	div	a1,a1,a5
   10268:	00058a63          	beqz	a1,1027c <register_tm_clones+0x34>
   1026c:	ffff0317          	auipc	t1,0xffff0
   10270:	d9430313          	addi	t1,t1,-620 # 0 <main-0x10074>
   10274:	00030463          	beqz	t1,1027c <register_tm_clones+0x34>
   10278:	00030067          	jr	t1
   1027c:	00008067          	ret

00010280 <__do_global_dtors_aux>:
   10280:	00002797          	auipc	a5,0x2
   10284:	8e87c783          	lbu	a5,-1816(a5) # 11b68 <_edata>
   10288:	04079263          	bnez	a5,102cc <__do_global_dtors_aux+0x4c>
   1028c:	ff010113          	addi	sp,sp,-16
   10290:	00112623          	sw	ra,12(sp)
   10294:	f8dff0ef          	jal	ra,10220 <deregister_tm_clones>
   10298:	ffff0797          	auipc	a5,0xffff0
   1029c:	d6878793          	addi	a5,a5,-664 # 0 <main-0x10074>
   102a0:	00078a63          	beqz	a5,102b4 <__do_global_dtors_aux+0x34>
   102a4:	00000517          	auipc	a0,0x0
   102a8:	48450513          	addi	a0,a0,1156 # 10728 <__EH_FRAME_BEGIN__>
   102ac:	ffff0097          	auipc	ra,0xffff0
   102b0:	d54080e7          	jalr	-684(ra) # 0 <main-0x10074>
   102b4:	00c12083          	lw	ra,12(sp)
   102b8:	00100793          	li	a5,1
   102bc:	00002717          	auipc	a4,0x2
   102c0:	8af70623          	sb	a5,-1876(a4) # 11b68 <_edata>
   102c4:	01010113          	addi	sp,sp,16
   102c8:	00008067          	ret
   102cc:	00008067          	ret

000102d0 <frame_dummy>:
   102d0:	ffff0797          	auipc	a5,0xffff0
   102d4:	d3078793          	addi	a5,a5,-720 # 0 <main-0x10074>
   102d8:	02078663          	beqz	a5,10304 <frame_dummy+0x34>
   102dc:	ff010113          	addi	sp,sp,-16
   102e0:	00002597          	auipc	a1,0x2
   102e4:	88c58593          	addi	a1,a1,-1908 # 11b6c <object.5181>
   102e8:	00000517          	auipc	a0,0x0
   102ec:	44050513          	addi	a0,a0,1088 # 10728 <__EH_FRAME_BEGIN__>
   102f0:	00112623          	sw	ra,12(sp)
   102f4:	ffff0097          	auipc	ra,0xffff0
   102f8:	d0c080e7          	jalr	-756(ra) # 0 <main-0x10074>
   102fc:	00c12083          	lw	ra,12(sp)
   10300:	01010113          	addi	sp,sp,16
   10304:	f45ff06f          	j	10248 <register_tm_clones>

00010308 <atexit>:
   10308:	00050593          	mv	a1,a0
   1030c:	00000693          	li	a3,0
   10310:	00000613          	li	a2,0
   10314:	00000513          	li	a0,0
   10318:	2240006f          	j	1053c <__register_exitproc>

0001031c <exit>:
   1031c:	ff010113          	addi	sp,sp,-16
   10320:	00000593          	li	a1,0
   10324:	00812423          	sw	s0,8(sp)
   10328:	00112623          	sw	ra,12(sp)
   1032c:	00050413          	mv	s0,a0
   10330:	290000ef          	jal	ra,105c0 <__call_exitprocs>
   10334:	00002797          	auipc	a5,0x2
   10338:	82c78793          	addi	a5,a5,-2004 # 11b60 <_global_impure_ptr>
   1033c:	0007a503          	lw	a0,0(a5)
   10340:	03c52783          	lw	a5,60(a0)
   10344:	00078463          	beqz	a5,1034c <exit+0x30>
   10348:	000780e7          	jalr	a5
   1034c:	00040513          	mv	a0,s0
   10350:	384000ef          	jal	ra,106d4 <_exit>

00010354 <__libc_fini_array>:
   10354:	fe010113          	addi	sp,sp,-32
   10358:	00001797          	auipc	a5,0x1
   1035c:	3dc78793          	addi	a5,a5,988 # 11734 <__fini_array_end>
   10360:	00812c23          	sw	s0,24(sp)
   10364:	00001417          	auipc	s0,0x1
   10368:	3cc40413          	addi	s0,s0,972 # 11730 <__init_array_end>
   1036c:	40878433          	sub	s0,a5,s0
   10370:	00912a23          	sw	s1,20(sp)
   10374:	01212823          	sw	s2,16(sp)
   10378:	01312623          	sw	s3,12(sp)
   1037c:	00112e23          	sw	ra,28(sp)
   10380:	40245413          	srai	s0,s0,0x2
   10384:	00000493          	li	s1,0
   10388:	00078913          	mv	s2,a5
   1038c:	ffc00993          	li	s3,-4
   10390:	02941063          	bne	s0,s1,103b0 <__libc_fini_array+0x5c>
   10394:	01812403          	lw	s0,24(sp)
   10398:	01c12083          	lw	ra,28(sp)
   1039c:	01412483          	lw	s1,20(sp)
   103a0:	01012903          	lw	s2,16(sp)
   103a4:	00c12983          	lw	s3,12(sp)
   103a8:	02010113          	addi	sp,sp,32
   103ac:	e71ff06f          	j	1021c <_fini>
   103b0:	033487b3          	mul	a5,s1,s3
   103b4:	00148493          	addi	s1,s1,1
   103b8:	00f907b3          	add	a5,s2,a5
   103bc:	ffc7a783          	lw	a5,-4(a5)
   103c0:	000780e7          	jalr	a5
   103c4:	fcdff06f          	j	10390 <__libc_fini_array+0x3c>

000103c8 <__libc_init_array>:
   103c8:	ff010113          	addi	sp,sp,-16
   103cc:	00812423          	sw	s0,8(sp)
   103d0:	00912223          	sw	s1,4(sp)
   103d4:	00001417          	auipc	s0,0x1
   103d8:	35840413          	addi	s0,s0,856 # 1172c <__frame_dummy_init_array_entry>
   103dc:	00001497          	auipc	s1,0x1
   103e0:	35048493          	addi	s1,s1,848 # 1172c <__frame_dummy_init_array_entry>
   103e4:	408484b3          	sub	s1,s1,s0
   103e8:	01212023          	sw	s2,0(sp)
   103ec:	00112623          	sw	ra,12(sp)
   103f0:	4024d493          	srai	s1,s1,0x2
   103f4:	00000913          	li	s2,0
   103f8:	04991063          	bne	s2,s1,10438 <__libc_init_array+0x70>
   103fc:	00001417          	auipc	s0,0x1
   10400:	33040413          	addi	s0,s0,816 # 1172c <__frame_dummy_init_array_entry>
   10404:	00001497          	auipc	s1,0x1
   10408:	32c48493          	addi	s1,s1,812 # 11730 <__init_array_end>
   1040c:	408484b3          	sub	s1,s1,s0
   10410:	e0dff0ef          	jal	ra,1021c <_fini>
   10414:	4024d493          	srai	s1,s1,0x2
   10418:	00000913          	li	s2,0
   1041c:	02991863          	bne	s2,s1,1044c <__libc_init_array+0x84>
   10420:	00c12083          	lw	ra,12(sp)
   10424:	00812403          	lw	s0,8(sp)
   10428:	00412483          	lw	s1,4(sp)
   1042c:	00012903          	lw	s2,0(sp)
   10430:	01010113          	addi	sp,sp,16
   10434:	00008067          	ret
   10438:	00042783          	lw	a5,0(s0)
   1043c:	00190913          	addi	s2,s2,1
   10440:	00440413          	addi	s0,s0,4
   10444:	000780e7          	jalr	a5
   10448:	fb1ff06f          	j	103f8 <__libc_init_array+0x30>
   1044c:	00042783          	lw	a5,0(s0)
   10450:	00190913          	addi	s2,s2,1
   10454:	00440413          	addi	s0,s0,4
   10458:	000780e7          	jalr	a5
   1045c:	fc1ff06f          	j	1041c <__libc_init_array+0x54>

00010460 <memset>:
   10460:	00f00313          	li	t1,15
   10464:	00050713          	mv	a4,a0
   10468:	02c37e63          	bleu	a2,t1,104a4 <memset+0x44>
   1046c:	00f77793          	andi	a5,a4,15
   10470:	0a079063          	bnez	a5,10510 <memset+0xb0>
   10474:	08059263          	bnez	a1,104f8 <memset+0x98>
   10478:	ff067693          	andi	a3,a2,-16
   1047c:	00f67613          	andi	a2,a2,15
   10480:	00e686b3          	add	a3,a3,a4
   10484:	00b72023          	sw	a1,0(a4)
   10488:	00b72223          	sw	a1,4(a4)
   1048c:	00b72423          	sw	a1,8(a4)
   10490:	00b72623          	sw	a1,12(a4)
   10494:	01070713          	addi	a4,a4,16
   10498:	fed766e3          	bltu	a4,a3,10484 <memset+0x24>
   1049c:	00061463          	bnez	a2,104a4 <memset+0x44>
   104a0:	00008067          	ret
   104a4:	40c306b3          	sub	a3,t1,a2
   104a8:	00269693          	slli	a3,a3,0x2
   104ac:	00000297          	auipc	t0,0x0
   104b0:	005686b3          	add	a3,a3,t0
   104b4:	00c68067          	jr	12(a3)
   104b8:	00b70723          	sb	a1,14(a4)
   104bc:	00b706a3          	sb	a1,13(a4)
   104c0:	00b70623          	sb	a1,12(a4)
   104c4:	00b705a3          	sb	a1,11(a4)
   104c8:	00b70523          	sb	a1,10(a4)
   104cc:	00b704a3          	sb	a1,9(a4)
   104d0:	00b70423          	sb	a1,8(a4)
   104d4:	00b703a3          	sb	a1,7(a4)
   104d8:	00b70323          	sb	a1,6(a4)
   104dc:	00b702a3          	sb	a1,5(a4)
   104e0:	00b70223          	sb	a1,4(a4)
   104e4:	00b701a3          	sb	a1,3(a4)
   104e8:	00b70123          	sb	a1,2(a4)
   104ec:	00b700a3          	sb	a1,1(a4)
   104f0:	00b70023          	sb	a1,0(a4)
   104f4:	00008067          	ret
   104f8:	0ff5f593          	andi	a1,a1,255
   104fc:	00859693          	slli	a3,a1,0x8
   10500:	00d5e5b3          	or	a1,a1,a3
   10504:	01059693          	slli	a3,a1,0x10
   10508:	00d5e5b3          	or	a1,a1,a3
   1050c:	f6dff06f          	j	10478 <memset+0x18>
   10510:	00279693          	slli	a3,a5,0x2
   10514:	00000297          	auipc	t0,0x0
   10518:	005686b3          	add	a3,a3,t0
   1051c:	00008293          	mv	t0,ra
   10520:	fa0680e7          	jalr	-96(a3)
   10524:	00028093          	mv	ra,t0
   10528:	ff078793          	addi	a5,a5,-16
   1052c:	40f70733          	sub	a4,a4,a5
   10530:	00f60633          	add	a2,a2,a5
   10534:	f6c378e3          	bleu	a2,t1,104a4 <memset+0x44>
   10538:	f3dff06f          	j	10474 <memset+0x14>

0001053c <__register_exitproc>:
   1053c:	00001797          	auipc	a5,0x1
   10540:	62478793          	addi	a5,a5,1572 # 11b60 <_global_impure_ptr>
   10544:	0007a703          	lw	a4,0(a5)
   10548:	00050313          	mv	t1,a0
   1054c:	14872783          	lw	a5,328(a4)
   10550:	00079663          	bnez	a5,1055c <__register_exitproc+0x20>
   10554:	14c70793          	addi	a5,a4,332
   10558:	14f72423          	sw	a5,328(a4)
   1055c:	0047a703          	lw	a4,4(a5)
   10560:	01f00813          	li	a6,31
   10564:	fff00513          	li	a0,-1
   10568:	04e84a63          	blt	a6,a4,105bc <__register_exitproc+0x80>
   1056c:	00271893          	slli	a7,a4,0x2
   10570:	02030c63          	beqz	t1,105a8 <__register_exitproc+0x6c>
   10574:	01178533          	add	a0,a5,a7
   10578:	08c52423          	sw	a2,136(a0)
   1057c:	1887a803          	lw	a6,392(a5)
   10580:	00100613          	li	a2,1
   10584:	00e61633          	sll	a2,a2,a4
   10588:	00c86833          	or	a6,a6,a2
   1058c:	1907a423          	sw	a6,392(a5)
   10590:	10d52423          	sw	a3,264(a0)
   10594:	00200693          	li	a3,2
   10598:	00d31863          	bne	t1,a3,105a8 <__register_exitproc+0x6c>
   1059c:	18c7a683          	lw	a3,396(a5)
   105a0:	00c6e633          	or	a2,a3,a2
   105a4:	18c7a623          	sw	a2,396(a5)
   105a8:	00170713          	addi	a4,a4,1
   105ac:	00e7a223          	sw	a4,4(a5)
   105b0:	011787b3          	add	a5,a5,a7
   105b4:	00b7a423          	sw	a1,8(a5)
   105b8:	00000513          	li	a0,0
   105bc:	00008067          	ret

000105c0 <__call_exitprocs>:
   105c0:	fd010113          	addi	sp,sp,-48
   105c4:	00001797          	auipc	a5,0x1
   105c8:	59c78793          	addi	a5,a5,1436 # 11b60 <_global_impure_ptr>
   105cc:	01312e23          	sw	s3,28(sp)
   105d0:	0007a983          	lw	s3,0(a5)
   105d4:	01412c23          	sw	s4,24(sp)
   105d8:	01512a23          	sw	s5,20(sp)
   105dc:	01612823          	sw	s6,16(sp)
   105e0:	02112623          	sw	ra,44(sp)
   105e4:	02812423          	sw	s0,40(sp)
   105e8:	02912223          	sw	s1,36(sp)
   105ec:	03212023          	sw	s2,32(sp)
   105f0:	01712623          	sw	s7,12(sp)
   105f4:	00050a93          	mv	s5,a0
   105f8:	00058a13          	mv	s4,a1
   105fc:	00100b13          	li	s6,1
   10600:	1489a483          	lw	s1,328(s3)
   10604:	00048c63          	beqz	s1,1061c <__call_exitprocs+0x5c>
   10608:	0044a403          	lw	s0,4(s1)
   1060c:	fff40913          	addi	s2,s0,-1
   10610:	00241413          	slli	s0,s0,0x2
   10614:	00848433          	add	s0,s1,s0
   10618:	02095863          	bgez	s2,10648 <__call_exitprocs+0x88>
   1061c:	02c12083          	lw	ra,44(sp)
   10620:	02812403          	lw	s0,40(sp)
   10624:	02412483          	lw	s1,36(sp)
   10628:	02012903          	lw	s2,32(sp)
   1062c:	01c12983          	lw	s3,28(sp)
   10630:	01812a03          	lw	s4,24(sp)
   10634:	01412a83          	lw	s5,20(sp)
   10638:	01012b03          	lw	s6,16(sp)
   1063c:	00c12b83          	lw	s7,12(sp)
   10640:	03010113          	addi	sp,sp,48
   10644:	00008067          	ret
   10648:	000a0c63          	beqz	s4,10660 <__call_exitprocs+0xa0>
   1064c:	10442783          	lw	a5,260(s0)
   10650:	01478863          	beq	a5,s4,10660 <__call_exitprocs+0xa0>
   10654:	fff90913          	addi	s2,s2,-1
   10658:	ffc40413          	addi	s0,s0,-4
   1065c:	fbdff06f          	j	10618 <__call_exitprocs+0x58>
   10660:	0044a703          	lw	a4,4(s1)
   10664:	00442783          	lw	a5,4(s0)
   10668:	fff70713          	addi	a4,a4,-1
   1066c:	03271c63          	bne	a4,s2,106a4 <__call_exitprocs+0xe4>
   10670:	0124a223          	sw	s2,4(s1)
   10674:	fe0780e3          	beqz	a5,10654 <__call_exitprocs+0x94>
   10678:	1884a683          	lw	a3,392(s1)
   1067c:	012b1733          	sll	a4,s6,s2
   10680:	0044ab83          	lw	s7,4(s1)
   10684:	00d776b3          	and	a3,a4,a3
   10688:	02069263          	bnez	a3,106ac <__call_exitprocs+0xec>
   1068c:	000780e7          	jalr	a5
   10690:	0044a703          	lw	a4,4(s1)
   10694:	1489a783          	lw	a5,328(s3)
   10698:	f77714e3          	bne	a4,s7,10600 <__call_exitprocs+0x40>
   1069c:	faf48ce3          	beq	s1,a5,10654 <__call_exitprocs+0x94>
   106a0:	f61ff06f          	j	10600 <__call_exitprocs+0x40>
   106a4:	00042223          	sw	zero,4(s0)
   106a8:	fcdff06f          	j	10674 <__call_exitprocs+0xb4>
   106ac:	18c4a683          	lw	a3,396(s1)
   106b0:	08442583          	lw	a1,132(s0)
   106b4:	00d77733          	and	a4,a4,a3
   106b8:	00071863          	bnez	a4,106c8 <__call_exitprocs+0x108>
   106bc:	000a8513          	mv	a0,s5
   106c0:	000780e7          	jalr	a5
   106c4:	fcdff06f          	j	10690 <__call_exitprocs+0xd0>
   106c8:	00058513          	mv	a0,a1
   106cc:	000780e7          	jalr	a5
   106d0:	fc1ff06f          	j	10690 <__call_exitprocs+0xd0>

000106d4 <_exit>:
   106d4:	00000593          	li	a1,0
   106d8:	00000613          	li	a2,0
   106dc:	00000693          	li	a3,0
   106e0:	00000713          	li	a4,0
   106e4:	00000793          	li	a5,0
   106e8:	05d00893          	li	a7,93
   106ec:	00000073          	ecall
   106f0:	02055263          	bgez	a0,10714 <_exit+0x40>
   106f4:	ff010113          	addi	sp,sp,-16
   106f8:	00812423          	sw	s0,8(sp)
   106fc:	00050413          	mv	s0,a0
   10700:	00112623          	sw	ra,12(sp)
   10704:	40800433          	neg	s0,s0
   10708:	010000ef          	jal	ra,10718 <__errno>
   1070c:	00852023          	sw	s0,0(a0)
   10710:	0000006f          	j	10710 <_exit+0x3c>
   10714:	0000006f          	j	10714 <_exit+0x40>

00010718 <__errno>:
   10718:	00001797          	auipc	a5,0x1
   1071c:	44c78793          	addi	a5,a5,1100 # 11b64 <_impure_ptr>
   10720:	0007a503          	lw	a0,0(a5)
   10724:	00008067          	ret
