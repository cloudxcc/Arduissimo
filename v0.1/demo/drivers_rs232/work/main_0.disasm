
drivers_rs232_0.elf:     file format elf32-littleriscv


Disassembly of section .text:

00010074 <main>:
#include "driver_rs232.h"

unsigned gl_tx_cnt;

int main(void)
{
   10074:	1141                	addi	sp,sp,-16
   gl_tx_cnt = 0;
   // INIT TX
   rs232_tx_init(0, 32, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   10076:	61a00713          	li	a4,1562
   1007a:	4681                	li	a3,0
   1007c:	4605                	li	a2,1
   1007e:	02000593          	li	a1,32
   10082:	4501                	li	a0,0
{
   10084:	c606                	sw	ra,12(sp)
   gl_tx_cnt = 0;
   10086:	9201aa23          	sw	zero,-1740(gp) # 11564 <gl_tx_cnt>
   rs232_tx_init(0, 32, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   1008a:	2ca5                	jal	10302 <rs232_tx_init>
   rs232_tx_init(1, 33, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   1008c:	61a00713          	li	a4,1562
   10090:	4681                	li	a3,0
   10092:	4605                	li	a2,1
   10094:	02100593          	li	a1,33
   10098:	4505                	li	a0,1
   1009a:	24a5                	jal	10302 <rs232_tx_init>
   rs232_tx_init(2, 34, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   1009c:	61a00713          	li	a4,1562
   100a0:	4681                	li	a3,0
   100a2:	4605                	li	a2,1
   100a4:	02200593          	li	a1,34
   100a8:	4509                	li	a0,2
   100aa:	2ca1                	jal	10302 <rs232_tx_init>
   rs232_tx_init(3, 35, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   100ac:	61a00713          	li	a4,1562
   100b0:	4681                	li	a3,0
   100b2:	4605                	li	a2,1
   100b4:	02300593          	li	a1,35
   100b8:	450d                	li	a0,3
   100ba:	24a1                	jal	10302 <rs232_tx_init>
   rs232_tx_init(4, 36, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   100bc:	61a00713          	li	a4,1562
   100c0:	4681                	li	a3,0
   100c2:	4605                	li	a2,1
   100c4:	02400593          	li	a1,36
   100c8:	4511                	li	a0,4
   100ca:	2c25                	jal	10302 <rs232_tx_init>
   rs232_tx_init(5, 37, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   100cc:	61a00713          	li	a4,1562
   100d0:	4681                	li	a3,0
   100d2:	4605                	li	a2,1
   100d4:	02500593          	li	a1,37
   100d8:	4515                	li	a0,5
   100da:	2425                	jal	10302 <rs232_tx_init>
   rs232_tx_init(6, 38, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   100dc:	61a00713          	li	a4,1562
   100e0:	4681                	li	a3,0
   100e2:	4605                	li	a2,1
   100e4:	02600593          	li	a1,38
   100e8:	4519                	li	a0,6
   100ea:	2c21                	jal	10302 <rs232_tx_init>
   rs232_tx_init(7, 39, RS232_parity_even, RS232_stop_1, RS232_baud_115200);
   100ec:	61a00713          	li	a4,1562
   100f0:	4681                	li	a3,0
   100f2:	4605                	li	a2,1
   100f4:	02700593          	li	a1,39
   100f8:	451d                	li	a0,7
   100fa:	2421                	jal	10302 <rs232_tx_init>

   // INIT RX
   rs232_rx_init(0, 32, RS232_parity_even, RS232_baud_115200);
   100fc:	61a00693          	li	a3,1562
   10100:	4605                	li	a2,1
   10102:	02000593          	li	a1,32
   10106:	4501                	li	a0,0
   10108:	29f9                	jal	105e6 <rs232_rx_init>
   rs232_rx_init(1, 33, RS232_parity_even, RS232_baud_115200);
   1010a:	61a00693          	li	a3,1562
   1010e:	4605                	li	a2,1
   10110:	02100593          	li	a1,33
   10114:	4505                	li	a0,1
   10116:	29c1                	jal	105e6 <rs232_rx_init>
   rs232_rx_init(2, 34, RS232_parity_even, RS232_baud_115200);
   10118:	61a00693          	li	a3,1562
   1011c:	4605                	li	a2,1
   1011e:	02200593          	li	a1,34
   10122:	4509                	li	a0,2
   10124:	21c9                	jal	105e6 <rs232_rx_init>
   rs232_rx_init(3, 35, RS232_parity_even, RS232_baud_115200);
   10126:	61a00693          	li	a3,1562
   1012a:	4605                	li	a2,1
   1012c:	02300593          	li	a1,35
   10130:	450d                	li	a0,3
   10132:	2955                	jal	105e6 <rs232_rx_init>
   rs232_rx_init(4, 36, RS232_parity_even, RS232_baud_115200);
   10134:	61a00693          	li	a3,1562
   10138:	4605                	li	a2,1
   1013a:	02400593          	li	a1,36
   1013e:	4511                	li	a0,4
   10140:	215d                	jal	105e6 <rs232_rx_init>
   rs232_rx_init(5, 37, RS232_parity_even, RS232_baud_115200);
   10142:	61a00693          	li	a3,1562
   10146:	4605                	li	a2,1
   10148:	02500593          	li	a1,37
   1014c:	4515                	li	a0,5
   1014e:	2961                	jal	105e6 <rs232_rx_init>
   rs232_rx_init(6, 38, RS232_parity_even, RS232_baud_115200);
   10150:	61a00693          	li	a3,1562
   10154:	4605                	li	a2,1
   10156:	02600593          	li	a1,38
   1015a:	4519                	li	a0,6
   1015c:	2169                	jal	105e6 <rs232_rx_init>

   // TX
   rs232_tx(0, 0x00);
   1015e:	4581                	li	a1,0
   10160:	4501                	li	a0,0
   10162:	2ce9                	jal	1043c <rs232_tx>

   // RX is handled in rs232_rx_finish

   TC_KILL = 0x0;
   10164:	800007b7          	lui	a5,0x80000
   10168:	0007a223          	sw	zero,4(a5) # 80000004 <__global_pointer$+0x7ffee3d4>
   asm volatile ("addi x0, x0, 0");
   1016c:	00000013          	nop
}
   10170:	40b2                	lw	ra,12(sp)
   10172:	4501                	li	a0,0
   10174:	0141                	addi	sp,sp,16
   10176:	8082                	ret

00010178 <_start>:
   10178:	00002197          	auipc	gp,0x2
   1017c:	ab818193          	addi	gp,gp,-1352 # 11c30 <__global_pointer$>
   10180:	80818513          	addi	a0,gp,-2040 # 11438 <_edata>
   10184:	af018613          	addi	a2,gp,-1296 # 11720 <_end>
   10188:	40a60633          	sub	a2,a2,a0
   1018c:	00000593          	li	a1,0
   10190:	748000ef          	jal	ra,108d8 <memset>
   10194:	00000517          	auipc	a0,0x0
   10198:	63850513          	addi	a0,a0,1592 # 107cc <__libc_fini_array>
   1019c:	5e4000ef          	jal	ra,10780 <atexit>
   101a0:	6a0000ef          	jal	ra,10840 <__libc_init_array>
   101a4:	00012503          	lw	a0,0(sp)
   101a8:	00410593          	addi	a1,sp,4
   101ac:	00000613          	li	a2,0
   101b0:	ec5ff0ef          	jal	ra,10074 <main>
   101b4:	5e00006f          	j	10794 <exit>

000101b8 <_fini>:
   101b8:	00008067          	ret

000101bc <deregister_tm_clones>:
   101bc:	00001517          	auipc	a0,0x1
   101c0:	27450513          	addi	a0,a0,628 # 11430 <_global_impure_ptr>
   101c4:	00001797          	auipc	a5,0x1
   101c8:	26c78793          	addi	a5,a5,620 # 11430 <_global_impure_ptr>
   101cc:	00a78a63          	beq	a5,a0,101e0 <deregister_tm_clones+0x24>
   101d0:	ffff0317          	auipc	t1,0xffff0
   101d4:	e3030313          	addi	t1,t1,-464 # 0 <main-0x10074>
   101d8:	00030463          	beqz	t1,101e0 <deregister_tm_clones+0x24>
   101dc:	00030067          	jr	t1
   101e0:	00008067          	ret

000101e4 <register_tm_clones>:
   101e4:	00001517          	auipc	a0,0x1
   101e8:	24c50513          	addi	a0,a0,588 # 11430 <_global_impure_ptr>
   101ec:	00001597          	auipc	a1,0x1
   101f0:	24458593          	addi	a1,a1,580 # 11430 <_global_impure_ptr>
   101f4:	40a585b3          	sub	a1,a1,a0
   101f8:	4025d593          	srai	a1,a1,0x2
   101fc:	00200793          	li	a5,2
   10200:	02f5c5b3          	div	a1,a1,a5
   10204:	00058a63          	beqz	a1,10218 <register_tm_clones+0x34>
   10208:	ffff0317          	auipc	t1,0xffff0
   1020c:	df830313          	addi	t1,t1,-520 # 0 <main-0x10074>
   10210:	00030463          	beqz	t1,10218 <register_tm_clones+0x34>
   10214:	00030067          	jr	t1
   10218:	00008067          	ret

0001021c <__do_global_dtors_aux>:
   1021c:	00001797          	auipc	a5,0x1
   10220:	21c7c783          	lbu	a5,540(a5) # 11438 <_edata>
   10224:	04079263          	bnez	a5,10268 <__do_global_dtors_aux+0x4c>
   10228:	ff010113          	addi	sp,sp,-16
   1022c:	00112623          	sw	ra,12(sp)
   10230:	f8dff0ef          	jal	ra,101bc <deregister_tm_clones>
   10234:	ffff0797          	auipc	a5,0xffff0
   10238:	dcc78793          	addi	a5,a5,-564 # 0 <main-0x10074>
   1023c:	00078a63          	beqz	a5,10250 <__do_global_dtors_aux+0x34>
   10240:	00001517          	auipc	a0,0x1
   10244:	96050513          	addi	a0,a0,-1696 # 10ba0 <__EH_FRAME_BEGIN__>
   10248:	ffff0097          	auipc	ra,0xffff0
   1024c:	db8080e7          	jalr	-584(ra) # 0 <main-0x10074>
   10250:	00c12083          	lw	ra,12(sp)
   10254:	00100793          	li	a5,1
   10258:	00001717          	auipc	a4,0x1
   1025c:	1ef70023          	sb	a5,480(a4) # 11438 <_edata>
   10260:	01010113          	addi	sp,sp,16
   10264:	00008067          	ret
   10268:	00008067          	ret

0001026c <frame_dummy>:
   1026c:	ffff0797          	auipc	a5,0xffff0
   10270:	d9478793          	addi	a5,a5,-620 # 0 <main-0x10074>
   10274:	02078663          	beqz	a5,102a0 <frame_dummy+0x34>
   10278:	ff010113          	addi	sp,sp,-16
   1027c:	00001597          	auipc	a1,0x1
   10280:	1c058593          	addi	a1,a1,448 # 1143c <object.5181>
   10284:	00001517          	auipc	a0,0x1
   10288:	91c50513          	addi	a0,a0,-1764 # 10ba0 <__EH_FRAME_BEGIN__>
   1028c:	00112623          	sw	ra,12(sp)
   10290:	ffff0097          	auipc	ra,0xffff0
   10294:	d70080e7          	jalr	-656(ra) # 0 <main-0x10074>
   10298:	00c12083          	lw	ra,12(sp)
   1029c:	01010113          	addi	sp,sp,16
   102a0:	f45ff06f          	j	101e4 <register_tm_clones>

000102a4 <ca_delay>:

#include "device.h"
#include "ca_util.h"

void ca_delay(unsigned delay) {
   unsigned end_time = CA_CT + delay;
   102a4:	800017b7          	lui	a5,0x80001
   102a8:	479c                	lw	a5,8(a5)
   while (CA_CT < end_time) {}
   102aa:	80001737          	lui	a4,0x80001
   unsigned end_time = CA_CT + delay;
   102ae:	953e                	add	a0,a0,a5
   while (CA_CT < end_time) {}
   102b0:	471c                	lw	a5,8(a4)
   102b2:	fea7efe3          	bltu	a5,a0,102b0 <ca_delay+0xc>
}
   102b6:	8082                	ret

000102b8 <set_dir>:
   *gpio_n_out = 0x1 << (pin & 0x7);
}

void set_dir (unsigned pin, unsigned dir) {
   unsigned* gpio_n_dir = &GPIO_0_DIR_CLR;
   gpio_n_dir += 0x40 * (pin >> 3);
   102b8:	00355793          	srli	a5,a0,0x3
   gpio_n_dir += dir;
   *gpio_n_dir = 0x1 << (pin & 0x7);
   102bc:	058a                	slli	a1,a1,0x2
   102be:	07a2                	slli	a5,a5,0x8
   102c0:	97ae                	add	a5,a5,a1
   102c2:	891d                	andi	a0,a0,7
   102c4:	800305b7          	lui	a1,0x80030
   102c8:	4705                	li	a4,1
   102ca:	97ae                	add	a5,a5,a1
   102cc:	00a71533          	sll	a0,a4,a0
   102d0:	c388                	sw	a0,0(a5)
}
   102d2:	8082                	ret

000102d4 <gpio_event>:

void gpio_event(unsigned tag, int start_time) {
   if (start_time >= 0) {
   102d4:	0005cc63          	bltz	a1,102ec <gpio_event+0x18>
     GPIO_EVENT_ADD = (((unsigned)&&gpio_event_label >> 1) & 0x3fff);
   102d8:	000107b7          	lui	a5,0x10
   102dc:	2ec78793          	addi	a5,a5,748 # 102ec <gpio_event+0x18>
   102e0:	07c6                	slli	a5,a5,0x11
   102e2:	83c9                	srli	a5,a5,0x12
   102e4:	80031737          	lui	a4,0x80031
   102e8:	c31c                	sw	a5,0(a4)
   102ea:	8082                	ret
   } else
   {
     gpio_event_label:
       TC_SAK = gpio_event_hash[tag];
   102ec:	9d018793          	addi	a5,gp,-1584 # 11600 <gpio_event_hash>
   102f0:	050a                	slli	a0,a0,0x2
   102f2:	953e                	add	a0,a0,a5
   102f4:	4118                	lw	a4,0(a0)
   102f6:	800007b7          	lui	a5,0x80000
   102fa:	c798                	sw	a4,8(a5)
       //TC_START = gpio_event_hash[tag];
       //TC_KILL = 0x0;
       asm volatile ("addi x0, x0, 0");
   102fc:	00000013          	nop
   }
}
   10300:	8082                	ret

00010302 <rs232_tx_init>:
#include "driver_rs232.h"

///////////////////////////////////////////////////
//	rs232_tx_init
///////////////////////////////////////////////////
void rs232_tx_init(unsigned id, char tx_pin, char parity, char stop_bits, unsigned delay) {
   10302:	1141                	addi	sp,sp,-16
   10304:	c226                	sw	s1,4(sp)
   10306:	84aa                	mv	s1,a0
   // save the configuration
   rs232_tx_conf[id] = ((parity & 0x3) << 1) + (stop_bits & 0x1);
   10308:	0606                	slli	a2,a2,0x1
void rs232_tx_init(unsigned id, char tx_pin, char parity, char stop_bits, unsigned delay) {
   1030a:	c422                	sw	s0,8(sp)
   rs232_tx_conf[id] = ((parity & 0x3) << 1) + (stop_bits & 0x1);
   1030c:	8a85                	andi	a3,a3,1
   1030e:	00249413          	slli	s0,s1,0x2
   10312:	8c818793          	addi	a5,gp,-1848 # 114f8 <rs232_tx_conf>
   10316:	8a19                	andi	a2,a2,6
void rs232_tx_init(unsigned id, char tx_pin, char parity, char stop_bits, unsigned delay) {
   10318:	c606                	sw	ra,12(sp)
   rs232_tx_conf[id] = ((parity & 0x3) << 1) + (stop_bits & 0x1);
   1031a:	8e55                	or	a2,a2,a3
   1031c:	97a2                	add	a5,a5,s0
   1031e:	c390                	sw	a2,0(a5)
   // save the day
   rs232_tx_delay[id] = delay;
   10320:	95818793          	addi	a5,gp,-1704 # 11588 <rs232_tx_delay>
   10324:	97a2                	add	a5,a5,s0
   10326:	c398                	sw	a4,0(a5)
   // get GPIO_N basic register
   unsigned* gpio_n_out = &GPIO_0_OUT_CLR;
   gpio_n_out += 0x40 * (tx_pin >> 3);
   10328:	4035d793          	srai	a5,a1,0x3
   1032c:	80030737          	lui	a4,0x80030
   10330:	0741                	addi	a4,a4,16
   10332:	07a2                	slli	a5,a5,0x8
   10334:	97ba                	add	a5,a5,a4
   // save clr and set addresses
   rs232_tx_clr_add[id] = gpio_n_out;
   10336:	93818713          	addi	a4,gp,-1736 # 11568 <rs232_tx_clr_add>
   1033a:	9722                	add	a4,a4,s0
   1033c:	c31c                	sw	a5,0(a4)
   gpio_n_out += 0x1;
   rs232_tx_set_add[id] = gpio_n_out;
   1033e:	8e818713          	addi	a4,gp,-1816 # 11518 <rs232_tx_set_add>
   gpio_n_out += 0x1;
   10342:	00478693          	addi	a3,a5,4 # 80000004 <__global_pointer$+0x7ffee3d4>
   rs232_tx_set_add[id] = gpio_n_out;
   10346:	9722                	add	a4,a4,s0
   10348:	c314                	sw	a3,0(a4)
   // get bit number
   unsigned bit_mask = 0x1 << (tx_pin & 0x7);
   1034a:	0075f713          	andi	a4,a1,7
   1034e:	4685                	li	a3,1
   10350:	00e696b3          	sll	a3,a3,a4
   rs232_tx_bit[id] = bit_mask;
   10354:	97818713          	addi	a4,gp,-1672 # 115a8 <rs232_tx_bit>
   10358:	9722                	add	a4,a4,s0
   1035a:	c314                	sw	a3,0(a4)
void rs232_tx_init(unsigned id, char tx_pin, char parity, char stop_bits, unsigned delay) {
   1035c:	852e                	mv	a0,a1
   // set bit to 1 (before setting output)
   *gpio_n_out = bit_mask;
   1035e:	c3d4                	sw	a3,4(a5)
   // set output
   set_dir(tx_pin, 1);
   10360:	4585                	li	a1,1
   10362:	3f99                	jal	102b8 <set_dir>
   // link TX final
   int dummy = CA_CT;  // workaround
   10364:	800017b7          	lui	a5,0x80001
   10368:	478c                	lw	a1,8(a5)
   rs232_tx_hash[id] = rs232_tx_final(id, dummy);
   1036a:	8526                	mv	a0,s1
   1036c:	2e35                	jal	106a8 <rs232_tx_final>
   1036e:	8a818793          	addi	a5,gp,-1880 # 114d8 <rs232_tx_hash>
   10372:	943e                	add	s0,s0,a5
   10374:	c008                	sw	a0,0(s0)
}
   10376:	40b2                	lw	ra,12(sp)
   10378:	4422                	lw	s0,8(sp)
   1037a:	4492                	lw	s1,4(sp)
   1037c:	0141                	addi	sp,sp,16
   1037e:	8082                	ret

00010380 <rs232_tx_event>:

///////////////////////////////////////////////////
//	rs232_tx_event
///////////////////////////////////////////////////
void rs232_tx_event(unsigned tag, int start_time) {
   if (start_time >= 0) {
   10380:	0205c263          	bltz	a1,103a4 <rs232_tx_event+0x24>
      CA_COM = 0xc0000000 +                                      // execute threa
               (tag << 14) +                                     // save tag
               (((unsigned)&&rs232_tx_bit_label >> 1) & 0x3fff); // set pc
   10384:	000107b7          	lui	a5,0x10
   10388:	3a478793          	addi	a5,a5,932 # 103a4 <rs232_tx_event+0x24>
   1038c:	07c6                	slli	a5,a5,0x11
   1038e:	83c9                	srli	a5,a5,0x12
               (tag << 14) +                                     // save tag
   10390:	c0000737          	lui	a4,0xc0000
   10394:	97ba                	add	a5,a5,a4
   10396:	053a                	slli	a0,a0,0xe
   10398:	953e                	add	a0,a0,a5
      CA_COM = 0xc0000000 +                                      // execute threa
   1039a:	800017b7          	lui	a5,0x80001
   1039e:	c388                	sw	a0,0(a5)
      CA_ET = start_time;
   103a0:	c3cc                	sw	a1,4(a5)
   103a2:	8082                	ret
   } else {
      unsigned* gpio_n_out;
      unsigned bit_mask, data, trigger;
      rs232_tx_bit_label:
         // get data
         data = rs232_tx_data[tag];
   103a4:	87c18693          	addi	a3,gp,-1924 # 114ac <rs232_tx_data>
   103a8:	00151593          	slli	a1,a0,0x1
   103ac:	96ae                	add	a3,a3,a1
   103ae:	0006d683          	lhu	a3,0(a3)
         // continue ?
         if ((data & 0xffe) != 0)
   103b2:	6605                	lui	a2,0x1
   103b4:	1679                	addi	a2,a2,-2
   103b6:	8e75                	and	a2,a2,a3
   103b8:	87c18713          	addi	a4,gp,-1924 # 114ac <rs232_tx_data>
   103bc:	00251793          	slli	a5,a0,0x2
   103c0:	c635                	beqz	a2,1042c <rs232_tx_event+0xac>
         {
            // set or clear output pin
            if (data & 0x1)
   103c2:	0016f613          	andi	a2,a3,1
   103c6:	c225                	beqz	a2,10426 <rs232_tx_event+0xa6>
               gpio_n_out = rs232_tx_set_add[tag];
   103c8:	8e818613          	addi	a2,gp,-1816 # 11518 <rs232_tx_set_add>
            else
               gpio_n_out = rs232_tx_clr_add[tag];
   103cc:	963e                	add	a2,a2,a5
   103ce:	00062803          	lw	a6,0(a2) # 1000 <main-0xf074>
            bit_mask = rs232_tx_bit[tag];
   103d2:	97818613          	addi	a2,gp,-1672 # 115a8 <rs232_tx_bit>
   103d6:	963e                	add	a2,a2,a5
   103d8:	4210                	lw	a2,0(a2)
            *gpio_n_out = bit_mask;
            // update data
            rs232_tx_data[tag] = data >> 0x1;
   103da:	972e                	add	a4,a4,a1
   103dc:	8285                	srli	a3,a3,0x1
            *gpio_n_out = bit_mask;
   103de:	00c82023          	sw	a2,0(a6)
            rs232_tx_data[tag] = data >> 0x1;
   103e2:	00d71023          	sh	a3,0(a4) # c0000000 <__global_pointer$+0xbffee3d0>
            // next event
            trigger = rs232_tx_trigger[tag] + rs232_tx_delay[tag];
   103e6:	95818693          	addi	a3,gp,-1704 # 11588 <rs232_tx_delay>
   103ea:	85c18713          	addi	a4,gp,-1956 # 1148c <rs232_tx_trigger>
   103ee:	973e                	add	a4,a4,a5
   103f0:	97b6                	add	a5,a5,a3
   103f2:	439c                	lw	a5,0(a5)
   103f4:	4314                	lw	a3,0(a4)
            // re-arm the calendar
            CA_COM = 0xc0000000 +                                      // execute thread
                     (tag << 14) +                                     // save id
   103f6:	c0000637          	lui	a2,0xc0000
   103fa:	053a                	slli	a0,a0,0xe
            trigger = rs232_tx_trigger[tag] + rs232_tx_delay[tag];
   103fc:	96be                	add	a3,a3,a5
                     (((unsigned)&&rs232_tx_bit_label >> 1) & 0x3fff); // set pc
   103fe:	000107b7          	lui	a5,0x10
   10402:	3a478793          	addi	a5,a5,932 # 103a4 <rs232_tx_event+0x24>
   10406:	07c6                	slli	a5,a5,0x11
   10408:	83c9                	srli	a5,a5,0x12
                     (tag << 14) +                                     // save id
   1040a:	97b2                	add	a5,a5,a2
   1040c:	953e                	add	a0,a0,a5
            CA_COM = 0xc0000000 +                                      // execute thread
   1040e:	800017b7          	lui	a5,0x80001
   10412:	c388                	sw	a0,0(a5)
            CA_ET = trigger;
   10414:	c3d4                	sw	a3,4(a5)
            rs232_tx_trigger[tag] = trigger;
   10416:	c314                	sw	a3,0(a4)
         } else
            TC_START = rs232_tx_hash[tag];
      TC_KILL = 0x0;
   10418:	800007b7          	lui	a5,0x80000
   1041c:	0007a223          	sw	zero,4(a5) # 80000004 <__global_pointer$+0x7ffee3d4>
      asm volatile ("addi x0, x0, 0");
   10420:	00000013          	nop
   }
}
   10424:	8082                	ret
               gpio_n_out = rs232_tx_clr_add[tag];
   10426:	93818613          	addi	a2,gp,-1736 # 11568 <rs232_tx_clr_add>
   1042a:	b74d                	j	103cc <rs232_tx_event+0x4c>
            TC_START = rs232_tx_hash[tag];
   1042c:	8a818713          	addi	a4,gp,-1880 # 114d8 <rs232_tx_hash>
   10430:	97ba                	add	a5,a5,a4
   10432:	4398                	lw	a4,0(a5)
   10434:	800007b7          	lui	a5,0x80000
   10438:	c398                	sw	a4,0(a5)
   1043a:	bff9                	j	10418 <rs232_tx_event+0x98>

0001043c <rs232_tx>:
   if (rs232_tx_conf[tag] & 0x6) {
   1043c:	00251613          	slli	a2,a0,0x2
   10440:	8c818713          	addi	a4,gp,-1848 # 114f8 <rs232_tx_conf>
   10444:	9732                	add	a4,a4,a2
   10446:	4318                	lw	a4,0(a4)
   10448:	00677793          	andi	a5,a4,6
   1044c:	00177893          	andi	a7,a4,1
   10450:	cfa9                	beqz	a5,104aa <rs232_tx+0x6e>
      for (int n = 0; n < 8; n++)
   10452:	4681                	li	a3,0
      unsigned parity = 0;
   10454:	4781                	li	a5,0
      for (int n = 0; n < 8; n++)
   10456:	4321                	li	t1,8
         parity += (data >> n) & 0x1;
   10458:	00d5d833          	srl	a6,a1,a3
   1045c:	00187813          	andi	a6,a6,1
      for (int n = 0; n < 8; n++)
   10460:	0685                	addi	a3,a3,1
         parity += (data >> n) & 0x1;
   10462:	97c2                	add	a5,a5,a6
      for (int n = 0; n < 8; n++)
   10464:	fe669ae3          	bne	a3,t1,10458 <rs232_tx+0x1c>
      if (rs232_tx_conf[tag] & 0x4)
   10468:	8b11                	andi	a4,a4,4
   1046a:	c311                	beqz	a4,1046e <rs232_tx+0x32>
         parity += 0x1;
   1046c:	0785                	addi	a5,a5,1
      data += (parity & 0x1) << 8;
   1046e:	07a2                	slli	a5,a5,0x8
   10470:	1007f793          	andi	a5,a5,256
   10474:	95be                	add	a1,a1,a5
         data += 0x600;
   10476:	60058793          	addi	a5,a1,1536 # 80030600 <__global_pointer$+0x8001e9d0>
      if (rs232_tx_conf[tag] & 0x1)
   1047a:	00088663          	beqz	a7,10486 <rs232_tx+0x4a>
         data += 0xe00;
   1047e:	6785                	lui	a5,0x1
   10480:	e0078793          	addi	a5,a5,-512 # e00 <main-0xf274>
   10484:	97ae                	add	a5,a5,a1
      rs232_tx_data[tag] = data << 1;
   10486:	00151713          	slli	a4,a0,0x1
   1048a:	87c18693          	addi	a3,gp,-1924 # 114ac <rs232_tx_data>
   1048e:	9736                	add	a4,a4,a3
   10490:	0786                	slli	a5,a5,0x1
   10492:	00f71023          	sh	a5,0(a4)
   unsigned CT = CA_CT + 600;  // 120 cycle when 4 threads running,
   10496:	800017b7          	lui	a5,0x80001
   1049a:	478c                	lw	a1,8(a5)
   rs232_tx_trigger[tag] = CT;
   1049c:	85c18793          	addi	a5,gp,-1956 # 1148c <rs232_tx_trigger>
   unsigned CT = CA_CT + 600;  // 120 cycle when 4 threads running,
   104a0:	25858593          	addi	a1,a1,600
   rs232_tx_trigger[tag] = CT;
   104a4:	97b2                	add	a5,a5,a2
   104a6:	c38c                	sw	a1,0(a5)
   rs232_tx_event(tag, CT);
   104a8:	bde1                	j	10380 <rs232_tx_event>
         data += 0x300;
   104aa:	30058693          	addi	a3,a1,768
      if (rs232_tx_conf[tag] & 0x1)
   104ae:	00088463          	beqz	a7,104b6 <rs232_tx+0x7a>
         data += 0x700;
   104b2:	70058693          	addi	a3,a1,1792
       rs232_tx_data[tag] = data << 1;
   104b6:	00151713          	slli	a4,a0,0x1
   104ba:	87c18793          	addi	a5,gp,-1924 # 114ac <rs232_tx_data>
   104be:	973e                	add	a4,a4,a5
   104c0:	0686                	slli	a3,a3,0x1
   104c2:	00d71023          	sh	a3,0(a4)
   104c6:	bfc1                	j	10496 <rs232_tx+0x5a>

000104c8 <rs232_rx>:

///////////////////////////////////////////////////
//	rs232_rx
///////////////////////////////////////////////////
unsigned rs232_rx(unsigned tag, int start_time) {
   if (start_time >= 0) {
   104c8:	0005cf63          	bltz	a1,104e6 <rs232_rx+0x1e>
      return 0xc0000000 +                                  // execute thread
             (tag << 14) +                                 // save id
             (((unsigned)&&rs232_rx_label >> 1) & 0x3fff); // set pc
   104cc:	00010737          	lui	a4,0x10
   104d0:	4e670713          	addi	a4,a4,1254 # 104e6 <rs232_rx+0x1e>
   104d4:	0746                	slli	a4,a4,0x11
   104d6:	8349                	srli	a4,a4,0x12
             (tag << 14) +                                 // save id
   104d8:	c00007b7          	lui	a5,0xc0000
   104dc:	973e                	add	a4,a4,a5
   104de:	053a                	slli	a0,a0,0xe
   104e0:	972a                	add	a4,a4,a0
          rs232_rx_trigger[tag] = trigger;
      }
      TC_KILL = 0x0;
      asm volatile ("addi x0, x0, 0");
   }
}
   104e2:	853a                	mv	a0,a4
   104e4:	8082                	ret
      gpio_n_in = rs232_rx_bank[tag];
   104e6:	00251613          	slli	a2,a0,0x2
   104ea:	88c18793          	addi	a5,gp,-1908 # 114bc <rs232_rx_bank>
   104ee:	97b2                	add	a5,a5,a2
      read = *gpio_n_in;
   104f0:	439c                	lw	a5,0(a5)
      data = rs232_rx_data[tag];
   104f2:	92418813          	addi	a6,gp,-1756 # 11554 <rs232_rx_data>
   104f6:	00151e13          	slli	t3,a0,0x1
   104fa:	9872                	add	a6,a6,t3
      read = *gpio_n_in;
   104fc:	438c                	lw	a1,0(a5)
      data = rs232_rx_data[tag];
   104fe:	00085783          	lhu	a5,0(a6)
   10502:	92418893          	addi	a7,gp,-1756 # 11554 <rs232_rx_data>
      if ((data & 0x1) != 0) {   // Parity or stop bit
   10506:	0017f693          	andi	a3,a5,1
   1050a:	ce8d                	beqz	a3,10544 <rs232_rx+0x7c>
         data += (read << (8 - rs232_rx_bit[tag])) & 0x100;
   1050c:	9b418693          	addi	a3,gp,-1612 # 115e4 <rs232_rx_bit>
   10510:	96b2                	add	a3,a3,a2
   10512:	4288                	lw	a0,0(a3)
   10514:	46a1                	li	a3,8
         data >>= 1;
   10516:	8385                	srli	a5,a5,0x1
         data += (read << (8 - rs232_rx_bit[tag])) & 0x100;
   10518:	8e89                	sub	a3,a3,a0
   1051a:	00d596b3          	sll	a3,a1,a3
   1051e:	1006f693          	andi	a3,a3,256
   10522:	97b6                	add	a5,a5,a3
         rs232_rx_data[tag] = data;
   10524:	00f81023          	sh	a5,0(a6)
         TC_START = rs232_rx_hash[tag];
   10528:	82418793          	addi	a5,gp,-2012 # 11454 <rs232_rx_hash>
   1052c:	963e                	add	a2,a2,a5
   1052e:	4214                	lw	a3,0(a2)
   10530:	800007b7          	lui	a5,0x80000
   10534:	c394                	sw	a3,0(a5)
      TC_KILL = 0x0;
   10536:	800007b7          	lui	a5,0x80000
   1053a:	0007a223          	sw	zero,4(a5) # 80000004 <__global_pointer$+0x7ffee3d4>
      asm volatile ("addi x0, x0, 0");
   1053e:	00000013          	nop
   10542:	b745                	j	104e2 <rs232_rx+0x1a>
   10544:	90818313          	addi	t1,gp,-1784 # 11538 <rs232_rx_conf>
   10548:	9332                	add	t1,t1,a2
   1054a:	84018693          	addi	a3,gp,-1984 # 11470 <rs232_rx_delay>
   1054e:	96b2                	add	a3,a3,a2
   10550:	00032f03          	lw	t5,0(t1)
   10554:	4294                	lw	a3,0(a3)
   10556:	99818313          	addi	t1,gp,-1640 # 115c8 <rs232_rx_trigger>
         if (data == 0) {      // start bit
   1055a:	e7a9                	bnez	a5,105a4 <rs232_rx+0xdc>
            trigger = CA_CT + ((rs232_rx_delay[tag] * 3) >> 1) - 70;
   1055c:	458d                	li	a1,3
   1055e:	02b686b3          	mul	a3,a3,a1
   10562:	800017b7          	lui	a5,0x80001
   10566:	479c                	lw	a5,8(a5)
   10568:	fba78793          	addi	a5,a5,-70 # 80000fba <__global_pointer$+0x7ffef38a>
   1056c:	8285                	srli	a3,a3,0x1
   1056e:	96be                	add	a3,a3,a5
               rs232_rx_data[tag] = 0x100;
   10570:	10000793          	li	a5,256
            if (rs232_rx_conf[tag] == 0)
   10574:	000f0463          	beqz	t5,1057c <rs232_rx+0xb4>
               rs232_rx_data[tag] = 0x200;
   10578:	20000793          	li	a5,512
   1057c:	00f81023          	sh	a5,0(a6)
                   (((unsigned)&&rs232_rx_label >> 1) & 0x3fff); // set pc
   10580:	000107b7          	lui	a5,0x10
   10584:	4e678793          	addi	a5,a5,1254 # 104e6 <rs232_rx+0x1e>
   10588:	07c6                	slli	a5,a5,0x11
   1058a:	83c9                	srli	a5,a5,0x12
                   (tag << 14) +                                 // save id
   1058c:	c00005b7          	lui	a1,0xc0000
   10590:	97ae                	add	a5,a5,a1
   10592:	053a                	slli	a0,a0,0xe
   10594:	953e                	add	a0,a0,a5
          CA_COM = 0xc0000000 +                                 // execute thread
   10596:	800017b7          	lui	a5,0x80001
   1059a:	c388                	sw	a0,0(a5)
          CA_ET = trigger;
   1059c:	c3d4                	sw	a3,4(a5)
          rs232_rx_trigger[tag] = trigger;
   1059e:	961a                	add	a2,a2,t1
   105a0:	c214                	sw	a3,0(a2)
   105a2:	bf51                	j	10536 <rs232_rx+0x6e>
            trigger = rs232_rx_trigger[tag] + rs232_rx_delay[tag];
   105a4:	00c30833          	add	a6,t1,a2
   105a8:	00082803          	lw	a6,0(a6)
            data >>= 1;
   105ac:	8385                	srli	a5,a5,0x1
            trigger = rs232_rx_trigger[tag] + rs232_rx_delay[tag];
   105ae:	96c2                	add	a3,a3,a6
   105b0:	9b418813          	addi	a6,gp,-1612 # 115e4 <rs232_rx_bit>
   105b4:	9832                	add	a6,a6,a2
   105b6:	00082e83          	lw	t4,0(a6)
            if (rs232_rx_conf[tag] == 0)
   105ba:	000f1e63          	bnez	t5,105d6 <rs232_rx+0x10e>
               data += (read << (8 - rs232_rx_bit[tag])) & 0x100;
   105be:	4821                	li	a6,8
   105c0:	41d80833          	sub	a6,a6,t4
   105c4:	010595b3          	sll	a1,a1,a6
   105c8:	1005f593          	andi	a1,a1,256
               data += (read << (9 - rs232_rx_bit[tag])) & 0x200;
   105cc:	97ae                	add	a5,a5,a1
            rs232_rx_data[tag] = data;
   105ce:	98f2                	add	a7,a7,t3
   105d0:	00f89023          	sh	a5,0(a7)
   105d4:	b775                	j	10580 <rs232_rx+0xb8>
               data += (read << (9 - rs232_rx_bit[tag])) & 0x200;
   105d6:	4825                	li	a6,9
   105d8:	41d80833          	sub	a6,a6,t4
   105dc:	010595b3          	sll	a1,a1,a6
   105e0:	2005f593          	andi	a1,a1,512
   105e4:	b7e5                	j	105cc <rs232_rx+0x104>

000105e6 <rs232_rx_init>:
void rs232_rx_init(unsigned id, char rx_pin, char parity, unsigned delay) {
   105e6:	1101                	addi	sp,sp,-32
   105e8:	cc22                	sw	s0,24(sp)
   rs232_rx_conf[id] = parity & 0x3;
   105ea:	90818793          	addi	a5,gp,-1784 # 11538 <rs232_rx_conf>
   105ee:	00251413          	slli	s0,a0,0x2
void rs232_rx_init(unsigned id, char rx_pin, char parity, unsigned delay) {
   105f2:	ce06                	sw	ra,28(sp)
   105f4:	ca26                	sw	s1,20(sp)
   105f6:	c84a                	sw	s2,16(sp)
   105f8:	c64e                	sw	s3,12(sp)
   rs232_rx_conf[id] = parity & 0x3;
   105fa:	8a0d                	andi	a2,a2,3
   105fc:	97a2                	add	a5,a5,s0
   105fe:	c390                	sw	a2,0(a5)
   rs232_rx_delay[id] = delay;
   10600:	84018793          	addi	a5,gp,-1984 # 11470 <rs232_rx_delay>
   10604:	97a2                	add	a5,a5,s0
   10606:	c394                	sw	a3,0(a5)
   rs232_rx_data[id] = 0;
   10608:	92418713          	addi	a4,gp,-1756 # 11554 <rs232_rx_data>
   1060c:	00151793          	slli	a5,a0,0x1
   10610:	97ba                	add	a5,a5,a4
   10612:	00079023          	sh	zero,0(a5) # 80001000 <__global_pointer$+0x7ffef3d0>
   int dummy = CA_CT;  // workaround
   10616:	800017b7          	lui	a5,0x80001
   1061a:	0087a983          	lw	s3,8(a5) # 80001008 <__global_pointer$+0x7ffef3d8>
void rs232_rx_init(unsigned id, char rx_pin, char parity, unsigned delay) {
   1061e:	84ae                	mv	s1,a1
   10620:	892a                	mv	s2,a0
   gpio_event_hash[rx_pin] = rs232_rx(id, dummy);
   10622:	85ce                	mv	a1,s3
   10624:	3555                	jal	104c8 <rs232_rx>
   10626:	9d018713          	addi	a4,gp,-1584 # 11600 <gpio_event_hash>
   1062a:	00249793          	slli	a5,s1,0x2
   1062e:	97ba                	add	a5,a5,a4
   10630:	c388                	sw	a0,0(a5)
   gpio_event(0x0, dummy);
   10632:	85ce                	mv	a1,s3
   10634:	4501                	li	a0,0
   10636:	3979                	jal	102d4 <gpio_event>
   rs232_rx_hash[id] = rs232_rx_final(id, dummy);
   10638:	85ce                	mv	a1,s3
   1063a:	854a                	mv	a0,s2
   1063c:	20d1                	jal	10700 <rs232_rx_final>
   1063e:	82418793          	addi	a5,gp,-2012 # 11454 <rs232_rx_hash>
   10642:	97a2                	add	a5,a5,s0
   10644:	c388                	sw	a0,0(a5)
   gpio_n_in += 0x40 * (rx_pin >> 3);
   10646:	80030737          	lui	a4,0x80030
   1064a:	4034d793          	srai	a5,s1,0x3
   1064e:	02070713          	addi	a4,a4,32 # 80030020 <__global_pointer$+0x8001e3f0>
   10652:	07a2                	slli	a5,a5,0x8
   10654:	97ba                	add	a5,a5,a4
   rs232_rx_bank[id] = gpio_n_in;
   10656:	88c18713          	addi	a4,gp,-1908 # 114bc <rs232_rx_bank>
   1065a:	9722                	add	a4,a4,s0
   1065c:	c31c                	sw	a5,0(a4)
   1065e:	889d                	andi	s1,s1,7
   unsigned bit_mask = 0x1 << (rx_pin & 0x7);
   10660:	4705                	li	a4,1
   10662:	00971733          	sll	a4,a4,s1
   *gpio_n_in = bit_mask;
   10666:	cb98                	sw	a4,16(a5)
   rs232_rx_bit[id] = rx_pin & 0x7;
   10668:	9b418793          	addi	a5,gp,-1612 # 115e4 <rs232_rx_bit>
   1066c:	943e                	add	s0,s0,a5
   1066e:	c004                	sw	s1,0(s0)
}
   10670:	40f2                	lw	ra,28(sp)
   10672:	4462                	lw	s0,24(sp)
   10674:	44d2                	lw	s1,20(sp)
   10676:	4942                	lw	s2,16(sp)
   10678:	49b2                	lw	s3,12(sp)
   1067a:	6105                	addi	sp,sp,32
   1067c:	8082                	ret

0001067e <rs232_rx_rearm>:
///////////////////////////////////////////////////
//	rs232_rx_rearm
///////////////////////////////////////////////////
void rs232_rx_rearm(unsigned id) {
   // clear data
   rs232_rx_data[id] = 0;
   1067e:	00151793          	slli	a5,a0,0x1
   10682:	92418713          	addi	a4,gp,-1756 # 11554 <rs232_rx_data>
   10686:	97ba                	add	a5,a5,a4
   10688:	00079023          	sh	zero,0(a5)
   // get GPIO_N_IN register
   unsigned* gpio_n_in = rs232_rx_bank[id]; //&GPIO_0_IN;
   1068c:	050a                	slli	a0,a0,0x2
   1068e:	88c18793          	addi	a5,gp,-1908 # 114bc <rs232_rx_bank>
   10692:	97aa                	add	a5,a5,a0
   // get bit number
   unsigned bit_mask = 0x1 << rs232_rx_bit[id]; //(rx_pin & 0x7);
   // enable falling edge GPIO event at rx_pin
   gpio_n_in += 0x4;
   *gpio_n_in = bit_mask;
   10694:	4398                	lw	a4,0(a5)
   unsigned bit_mask = 0x1 << rs232_rx_bit[id]; //(rx_pin & 0x7);
   10696:	9b418793          	addi	a5,gp,-1612 # 115e4 <rs232_rx_bit>
   1069a:	953e                	add	a0,a0,a5
   1069c:	4114                	lw	a3,0(a0)
   1069e:	4785                	li	a5,1
   106a0:	00d797b3          	sll	a5,a5,a3
   *gpio_n_in = bit_mask;
   106a4:	cb1c                	sw	a5,16(a4)
}
   106a6:	8082                	ret

000106a8 <rs232_tx_final>:
unsigned gl_tx_cnt;

///////////////////////////////////////////////////
//	rs232_tx_final
///////////////////////////////////////////////////
unsigned rs232_tx_final(unsigned tag, int start_time) {
   106a8:	87aa                	mv	a5,a0
   if (start_time >= 0) {
   106aa:	0005ce63          	bltz	a1,106c6 <rs232_tx_final+0x1e>
      return 0xc0000000 +                              // execute thread, set a0
             (tag << 14) +                              // save tag
             (((unsigned)&&rs232_tx_final_label >> 1) & 0x3fff); // set pc
   106ae:	00010537          	lui	a0,0x10
   106b2:	6c650513          	addi	a0,a0,1734 # 106c6 <rs232_tx_final+0x1e>
   106b6:	0546                	slli	a0,a0,0x11
             (tag << 14) +                              // save tag
   106b8:	c0000737          	lui	a4,0xc0000
             (((unsigned)&&rs232_tx_final_label >> 1) & 0x3fff); // set pc
   106bc:	8149                	srli	a0,a0,0x12
             (tag << 14) +                              // save tag
   106be:	953a                	add	a0,a0,a4
   106c0:	07ba                	slli	a5,a5,0xe
   106c2:	953e                	add	a0,a0,a5
   106c4:	8082                	ret
   } else {
      rs232_tx_final_label:
         if (tag == 0) {
   106c6:	e515                	bnez	a0,106f2 <rs232_tx_final+0x4a>
            if (gl_tx_cnt < 15 * 16) {
   106c8:	9341a583          	lw	a1,-1740(gp) # 11564 <gl_tx_cnt>
   106cc:	0ef00713          	li	a4,239
   106d0:	02b76163          	bltu	a4,a1,106f2 <rs232_tx_final+0x4a>
unsigned rs232_tx_final(unsigned tag, int start_time) {
   106d4:	1141                	addi	sp,sp,-16
               //ca_delay(10000);
               gl_tx_cnt += 16;
   106d6:	05c1                	addi	a1,a1,16
unsigned rs232_tx_final(unsigned tag, int start_time) {
   106d8:	c606                	sw	ra,12(sp)
               gl_tx_cnt += 16;
   106da:	92b1aa23          	sw	a1,-1740(gp) # 11564 <gl_tx_cnt>
               rs232_tx(tag, gl_tx_cnt);
   106de:	3bb9                	jal	1043c <rs232_tx>
            }
         }
         TC_KILL = 0x0;
   106e0:	800007b7          	lui	a5,0x80000
   106e4:	0007a223          	sw	zero,4(a5) # 80000004 <__global_pointer$+0x7ffee3d4>
         asm volatile ("addi x0, x0, 0");
   106e8:	00000013          	nop
   }
}
   106ec:	40b2                	lw	ra,12(sp)
   106ee:	0141                	addi	sp,sp,16
   106f0:	8082                	ret
         TC_KILL = 0x0;
   106f2:	800007b7          	lui	a5,0x80000
   106f6:	0007a223          	sw	zero,4(a5) # 80000004 <__global_pointer$+0x7ffee3d4>
         asm volatile ("addi x0, x0, 0");
   106fa:	00000013          	nop
}
   106fe:	8082                	ret

00010700 <rs232_rx_final>:

///////////////////////////////////////////////////
//	rs232_rx_final
///////////////////////////////////////////////////
unsigned rs232_rx_final(unsigned tag, int start_time) {
   if (start_time >= 0) {
   10700:	0005ce63          	bltz	a1,1071c <rs232_rx_final+0x1c>
      return 0xc0000000 +                              // execute thread, set a0
             (tag << 14) +                              // save tag
             (((unsigned)&&rs232_rx_final_label >> 1) & 0x3fff); // set pc
   10704:	000107b7          	lui	a5,0x10
   10708:	71c78793          	addi	a5,a5,1820 # 1071c <rs232_rx_final+0x1c>
   1070c:	07c6                	slli	a5,a5,0x11
             (tag << 14) +                              // save tag
   1070e:	c0000737          	lui	a4,0xc0000
             (((unsigned)&&rs232_rx_final_label >> 1) & 0x3fff); // set pc
   10712:	83c9                	srli	a5,a5,0x12
             (tag << 14) +                              // save tag
   10714:	97ba                	add	a5,a5,a4
   10716:	053a                	slli	a0,a0,0xe
   10718:	953e                	add	a0,a0,a5
         rs232_tx(tag + 1, (rs232_rx_data[tag] & 0xff) + 1);
         rs232_rx_rearm(tag);
         TC_KILL = 0x0;
         asm volatile ("addi x0, x0, 0");
   }
}
   1071a:	8082                	ret
unsigned rs232_rx_final(unsigned tag, int start_time) {
   1071c:	1141                	addi	sp,sp,-16
   1071e:	c606                	sw	ra,12(sp)
   10720:	c422                	sw	s0,8(sp)
   10722:	c226                	sw	s1,4(sp)
         GPIO_3_OUT_CLR = 0xff;
   10724:	80030737          	lui	a4,0x80030
   10728:	0ff00793          	li	a5,255
   1072c:	30f72823          	sw	a5,784(a4) # 80030310 <__global_pointer$+0x8001e6e0>
         GPIO_3_OUT_SET = ~rs232_rx_data[tag];
   10730:	00151493          	slli	s1,a0,0x1
   10734:	92418793          	addi	a5,gp,-1756 # 11554 <rs232_rx_data>
   10738:	94be                	add	s1,s1,a5
   1073a:	842a                	mv	s0,a0
   1073c:	0004d503          	lhu	a0,0(s1)
   10740:	fff54793          	not	a5,a0
   10744:	30f72a23          	sw	a5,788(a4)
         ca_delay(((rs232_rx_data[tag] & 0xf) + ((rs232_rx_data[tag] & 0xff) >> 4)) * 10);
   10748:	40455793          	srai	a5,a0,0x4
   1074c:	8bbd                	andi	a5,a5,15
   1074e:	893d                	andi	a0,a0,15
   10750:	97aa                	add	a5,a5,a0
   10752:	4529                	li	a0,10
   10754:	02a78533          	mul	a0,a5,a0
   10758:	36b1                	jal	102a4 <ca_delay>
         rs232_tx(tag + 1, (rs232_rx_data[tag] & 0xff) + 1);
   1075a:	0004c583          	lbu	a1,0(s1)
   1075e:	00140513          	addi	a0,s0,1
   10762:	0585                	addi	a1,a1,1
   10764:	39e1                	jal	1043c <rs232_tx>
         rs232_rx_rearm(tag);
   10766:	8522                	mv	a0,s0
   10768:	3f19                	jal	1067e <rs232_rx_rearm>
         TC_KILL = 0x0;
   1076a:	800007b7          	lui	a5,0x80000
   1076e:	0007a223          	sw	zero,4(a5) # 80000004 <__global_pointer$+0x7ffee3d4>
         asm volatile ("addi x0, x0, 0");
   10772:	00000013          	nop
}
   10776:	40b2                	lw	ra,12(sp)
   10778:	4422                	lw	s0,8(sp)
   1077a:	4492                	lw	s1,4(sp)
   1077c:	0141                	addi	sp,sp,16
   1077e:	8082                	ret

00010780 <atexit>:
   10780:	00050593          	mv	a1,a0
   10784:	00000693          	li	a3,0
   10788:	00000613          	li	a2,0
   1078c:	00000513          	li	a0,0
   10790:	2240006f          	j	109b4 <__register_exitproc>

00010794 <exit>:
   10794:	ff010113          	addi	sp,sp,-16
   10798:	00000593          	li	a1,0
   1079c:	00812423          	sw	s0,8(sp)
   107a0:	00112623          	sw	ra,12(sp)
   107a4:	00050413          	mv	s0,a0
   107a8:	290000ef          	jal	ra,10a38 <__call_exitprocs>
   107ac:	00001797          	auipc	a5,0x1
   107b0:	c8478793          	addi	a5,a5,-892 # 11430 <_global_impure_ptr>
   107b4:	0007a503          	lw	a0,0(a5)
   107b8:	03c52783          	lw	a5,60(a0)
   107bc:	00078463          	beqz	a5,107c4 <exit+0x30>
   107c0:	000780e7          	jalr	a5
   107c4:	00040513          	mv	a0,s0
   107c8:	384000ef          	jal	ra,10b4c <_exit>

000107cc <__libc_fini_array>:
   107cc:	fe010113          	addi	sp,sp,-32
   107d0:	00001797          	auipc	a5,0x1
   107d4:	83878793          	addi	a5,a5,-1992 # 11008 <__fini_array_end>
   107d8:	00812c23          	sw	s0,24(sp)
   107dc:	00001417          	auipc	s0,0x1
   107e0:	82840413          	addi	s0,s0,-2008 # 11004 <__init_array_end>
   107e4:	40878433          	sub	s0,a5,s0
   107e8:	00912a23          	sw	s1,20(sp)
   107ec:	01212823          	sw	s2,16(sp)
   107f0:	01312623          	sw	s3,12(sp)
   107f4:	00112e23          	sw	ra,28(sp)
   107f8:	40245413          	srai	s0,s0,0x2
   107fc:	00000493          	li	s1,0
   10800:	00078913          	mv	s2,a5
   10804:	ffc00993          	li	s3,-4
   10808:	02941063          	bne	s0,s1,10828 <__libc_fini_array+0x5c>
   1080c:	01812403          	lw	s0,24(sp)
   10810:	01c12083          	lw	ra,28(sp)
   10814:	01412483          	lw	s1,20(sp)
   10818:	01012903          	lw	s2,16(sp)
   1081c:	00c12983          	lw	s3,12(sp)
   10820:	02010113          	addi	sp,sp,32
   10824:	995ff06f          	j	101b8 <_fini>
   10828:	033487b3          	mul	a5,s1,s3
   1082c:	00148493          	addi	s1,s1,1
   10830:	00f907b3          	add	a5,s2,a5
   10834:	ffc7a783          	lw	a5,-4(a5)
   10838:	000780e7          	jalr	a5
   1083c:	fcdff06f          	j	10808 <__libc_fini_array+0x3c>

00010840 <__libc_init_array>:
   10840:	ff010113          	addi	sp,sp,-16
   10844:	00812423          	sw	s0,8(sp)
   10848:	00912223          	sw	s1,4(sp)
   1084c:	00000417          	auipc	s0,0x0
   10850:	7b440413          	addi	s0,s0,1972 # 11000 <__frame_dummy_init_array_entry>
   10854:	00000497          	auipc	s1,0x0
   10858:	7ac48493          	addi	s1,s1,1964 # 11000 <__frame_dummy_init_array_entry>
   1085c:	408484b3          	sub	s1,s1,s0
   10860:	01212023          	sw	s2,0(sp)
   10864:	00112623          	sw	ra,12(sp)
   10868:	4024d493          	srai	s1,s1,0x2
   1086c:	00000913          	li	s2,0
   10870:	04991063          	bne	s2,s1,108b0 <__libc_init_array+0x70>
   10874:	00000417          	auipc	s0,0x0
   10878:	78c40413          	addi	s0,s0,1932 # 11000 <__frame_dummy_init_array_entry>
   1087c:	00000497          	auipc	s1,0x0
   10880:	78848493          	addi	s1,s1,1928 # 11004 <__init_array_end>
   10884:	408484b3          	sub	s1,s1,s0
   10888:	931ff0ef          	jal	ra,101b8 <_fini>
   1088c:	4024d493          	srai	s1,s1,0x2
   10890:	00000913          	li	s2,0
   10894:	02991863          	bne	s2,s1,108c4 <__libc_init_array+0x84>
   10898:	00c12083          	lw	ra,12(sp)
   1089c:	00812403          	lw	s0,8(sp)
   108a0:	00412483          	lw	s1,4(sp)
   108a4:	00012903          	lw	s2,0(sp)
   108a8:	01010113          	addi	sp,sp,16
   108ac:	00008067          	ret
   108b0:	00042783          	lw	a5,0(s0)
   108b4:	00190913          	addi	s2,s2,1
   108b8:	00440413          	addi	s0,s0,4
   108bc:	000780e7          	jalr	a5
   108c0:	fb1ff06f          	j	10870 <__libc_init_array+0x30>
   108c4:	00042783          	lw	a5,0(s0)
   108c8:	00190913          	addi	s2,s2,1
   108cc:	00440413          	addi	s0,s0,4
   108d0:	000780e7          	jalr	a5
   108d4:	fc1ff06f          	j	10894 <__libc_init_array+0x54>

000108d8 <memset>:
   108d8:	00f00313          	li	t1,15
   108dc:	00050713          	mv	a4,a0
   108e0:	02c37e63          	bleu	a2,t1,1091c <memset+0x44>
   108e4:	00f77793          	andi	a5,a4,15
   108e8:	0a079063          	bnez	a5,10988 <memset+0xb0>
   108ec:	08059263          	bnez	a1,10970 <memset+0x98>
   108f0:	ff067693          	andi	a3,a2,-16
   108f4:	00f67613          	andi	a2,a2,15
   108f8:	00e686b3          	add	a3,a3,a4
   108fc:	00b72023          	sw	a1,0(a4)
   10900:	00b72223          	sw	a1,4(a4)
   10904:	00b72423          	sw	a1,8(a4)
   10908:	00b72623          	sw	a1,12(a4)
   1090c:	01070713          	addi	a4,a4,16
   10910:	fed766e3          	bltu	a4,a3,108fc <memset+0x24>
   10914:	00061463          	bnez	a2,1091c <memset+0x44>
   10918:	00008067          	ret
   1091c:	40c306b3          	sub	a3,t1,a2
   10920:	00269693          	slli	a3,a3,0x2
   10924:	00000297          	auipc	t0,0x0
   10928:	005686b3          	add	a3,a3,t0
   1092c:	00c68067          	jr	12(a3)
   10930:	00b70723          	sb	a1,14(a4)
   10934:	00b706a3          	sb	a1,13(a4)
   10938:	00b70623          	sb	a1,12(a4)
   1093c:	00b705a3          	sb	a1,11(a4)
   10940:	00b70523          	sb	a1,10(a4)
   10944:	00b704a3          	sb	a1,9(a4)
   10948:	00b70423          	sb	a1,8(a4)
   1094c:	00b703a3          	sb	a1,7(a4)
   10950:	00b70323          	sb	a1,6(a4)
   10954:	00b702a3          	sb	a1,5(a4)
   10958:	00b70223          	sb	a1,4(a4)
   1095c:	00b701a3          	sb	a1,3(a4)
   10960:	00b70123          	sb	a1,2(a4)
   10964:	00b700a3          	sb	a1,1(a4)
   10968:	00b70023          	sb	a1,0(a4)
   1096c:	00008067          	ret
   10970:	0ff5f593          	andi	a1,a1,255
   10974:	00859693          	slli	a3,a1,0x8
   10978:	00d5e5b3          	or	a1,a1,a3
   1097c:	01059693          	slli	a3,a1,0x10
   10980:	00d5e5b3          	or	a1,a1,a3
   10984:	f6dff06f          	j	108f0 <memset+0x18>
   10988:	00279693          	slli	a3,a5,0x2
   1098c:	00000297          	auipc	t0,0x0
   10990:	005686b3          	add	a3,a3,t0
   10994:	00008293          	mv	t0,ra
   10998:	fa0680e7          	jalr	-96(a3)
   1099c:	00028093          	mv	ra,t0
   109a0:	ff078793          	addi	a5,a5,-16
   109a4:	40f70733          	sub	a4,a4,a5
   109a8:	00f60633          	add	a2,a2,a5
   109ac:	f6c378e3          	bleu	a2,t1,1091c <memset+0x44>
   109b0:	f3dff06f          	j	108ec <memset+0x14>

000109b4 <__register_exitproc>:
   109b4:	00001797          	auipc	a5,0x1
   109b8:	a7c78793          	addi	a5,a5,-1412 # 11430 <_global_impure_ptr>
   109bc:	0007a703          	lw	a4,0(a5)
   109c0:	00050313          	mv	t1,a0
   109c4:	14872783          	lw	a5,328(a4)
   109c8:	00079663          	bnez	a5,109d4 <__register_exitproc+0x20>
   109cc:	14c70793          	addi	a5,a4,332
   109d0:	14f72423          	sw	a5,328(a4)
   109d4:	0047a703          	lw	a4,4(a5)
   109d8:	01f00813          	li	a6,31
   109dc:	fff00513          	li	a0,-1
   109e0:	04e84a63          	blt	a6,a4,10a34 <__register_exitproc+0x80>
   109e4:	00271893          	slli	a7,a4,0x2
   109e8:	02030c63          	beqz	t1,10a20 <__register_exitproc+0x6c>
   109ec:	01178533          	add	a0,a5,a7
   109f0:	08c52423          	sw	a2,136(a0)
   109f4:	1887a803          	lw	a6,392(a5)
   109f8:	00100613          	li	a2,1
   109fc:	00e61633          	sll	a2,a2,a4
   10a00:	00c86833          	or	a6,a6,a2
   10a04:	1907a423          	sw	a6,392(a5)
   10a08:	10d52423          	sw	a3,264(a0)
   10a0c:	00200693          	li	a3,2
   10a10:	00d31863          	bne	t1,a3,10a20 <__register_exitproc+0x6c>
   10a14:	18c7a683          	lw	a3,396(a5)
   10a18:	00c6e633          	or	a2,a3,a2
   10a1c:	18c7a623          	sw	a2,396(a5)
   10a20:	00170713          	addi	a4,a4,1
   10a24:	00e7a223          	sw	a4,4(a5)
   10a28:	011787b3          	add	a5,a5,a7
   10a2c:	00b7a423          	sw	a1,8(a5)
   10a30:	00000513          	li	a0,0
   10a34:	00008067          	ret

00010a38 <__call_exitprocs>:
   10a38:	fd010113          	addi	sp,sp,-48
   10a3c:	00001797          	auipc	a5,0x1
   10a40:	9f478793          	addi	a5,a5,-1548 # 11430 <_global_impure_ptr>
   10a44:	01312e23          	sw	s3,28(sp)
   10a48:	0007a983          	lw	s3,0(a5)
   10a4c:	01412c23          	sw	s4,24(sp)
   10a50:	01512a23          	sw	s5,20(sp)
   10a54:	01612823          	sw	s6,16(sp)
   10a58:	02112623          	sw	ra,44(sp)
   10a5c:	02812423          	sw	s0,40(sp)
   10a60:	02912223          	sw	s1,36(sp)
   10a64:	03212023          	sw	s2,32(sp)
   10a68:	01712623          	sw	s7,12(sp)
   10a6c:	00050a93          	mv	s5,a0
   10a70:	00058a13          	mv	s4,a1
   10a74:	00100b13          	li	s6,1
   10a78:	1489a483          	lw	s1,328(s3)
   10a7c:	00048c63          	beqz	s1,10a94 <__call_exitprocs+0x5c>
   10a80:	0044a403          	lw	s0,4(s1)
   10a84:	fff40913          	addi	s2,s0,-1
   10a88:	00241413          	slli	s0,s0,0x2
   10a8c:	00848433          	add	s0,s1,s0
   10a90:	02095863          	bgez	s2,10ac0 <__call_exitprocs+0x88>
   10a94:	02c12083          	lw	ra,44(sp)
   10a98:	02812403          	lw	s0,40(sp)
   10a9c:	02412483          	lw	s1,36(sp)
   10aa0:	02012903          	lw	s2,32(sp)
   10aa4:	01c12983          	lw	s3,28(sp)
   10aa8:	01812a03          	lw	s4,24(sp)
   10aac:	01412a83          	lw	s5,20(sp)
   10ab0:	01012b03          	lw	s6,16(sp)
   10ab4:	00c12b83          	lw	s7,12(sp)
   10ab8:	03010113          	addi	sp,sp,48
   10abc:	00008067          	ret
   10ac0:	000a0c63          	beqz	s4,10ad8 <__call_exitprocs+0xa0>
   10ac4:	10442783          	lw	a5,260(s0)
   10ac8:	01478863          	beq	a5,s4,10ad8 <__call_exitprocs+0xa0>
   10acc:	fff90913          	addi	s2,s2,-1
   10ad0:	ffc40413          	addi	s0,s0,-4
   10ad4:	fbdff06f          	j	10a90 <__call_exitprocs+0x58>
   10ad8:	0044a703          	lw	a4,4(s1)
   10adc:	00442783          	lw	a5,4(s0)
   10ae0:	fff70713          	addi	a4,a4,-1
   10ae4:	03271c63          	bne	a4,s2,10b1c <__call_exitprocs+0xe4>
   10ae8:	0124a223          	sw	s2,4(s1)
   10aec:	fe0780e3          	beqz	a5,10acc <__call_exitprocs+0x94>
   10af0:	1884a683          	lw	a3,392(s1)
   10af4:	012b1733          	sll	a4,s6,s2
   10af8:	0044ab83          	lw	s7,4(s1)
   10afc:	00d776b3          	and	a3,a4,a3
   10b00:	02069263          	bnez	a3,10b24 <__call_exitprocs+0xec>
   10b04:	000780e7          	jalr	a5
   10b08:	0044a703          	lw	a4,4(s1)
   10b0c:	1489a783          	lw	a5,328(s3)
   10b10:	f77714e3          	bne	a4,s7,10a78 <__call_exitprocs+0x40>
   10b14:	faf48ce3          	beq	s1,a5,10acc <__call_exitprocs+0x94>
   10b18:	f61ff06f          	j	10a78 <__call_exitprocs+0x40>
   10b1c:	00042223          	sw	zero,4(s0)
   10b20:	fcdff06f          	j	10aec <__call_exitprocs+0xb4>
   10b24:	18c4a683          	lw	a3,396(s1)
   10b28:	08442583          	lw	a1,132(s0)
   10b2c:	00d77733          	and	a4,a4,a3
   10b30:	00071863          	bnez	a4,10b40 <__call_exitprocs+0x108>
   10b34:	000a8513          	mv	a0,s5
   10b38:	000780e7          	jalr	a5
   10b3c:	fcdff06f          	j	10b08 <__call_exitprocs+0xd0>
   10b40:	00058513          	mv	a0,a1
   10b44:	000780e7          	jalr	a5
   10b48:	fc1ff06f          	j	10b08 <__call_exitprocs+0xd0>

00010b4c <_exit>:
   10b4c:	00000593          	li	a1,0
   10b50:	00000613          	li	a2,0
   10b54:	00000693          	li	a3,0
   10b58:	00000713          	li	a4,0
   10b5c:	00000793          	li	a5,0
   10b60:	05d00893          	li	a7,93
   10b64:	00000073          	ecall
   10b68:	02055263          	bgez	a0,10b8c <_exit+0x40>
   10b6c:	ff010113          	addi	sp,sp,-16
   10b70:	00812423          	sw	s0,8(sp)
   10b74:	00050413          	mv	s0,a0
   10b78:	00112623          	sw	ra,12(sp)
   10b7c:	40800433          	neg	s0,s0
   10b80:	010000ef          	jal	ra,10b90 <__errno>
   10b84:	00852023          	sw	s0,0(a0)
   10b88:	0000006f          	j	10b88 <_exit+0x3c>
   10b8c:	0000006f          	j	10b8c <_exit+0x40>

00010b90 <__errno>:
   10b90:	00001797          	auipc	a5,0x1
   10b94:	8a478793          	addi	a5,a5,-1884 # 11434 <_impure_ptr>
   10b98:	0007a503          	lw	a0,0(a5)
   10b9c:	00008067          	ret
